#!/usr/bin/python3
# -*- coding: ascii -*-
""" Runs the boot-update program from command line """

import os
import sys
import textwrap
import shutil

debug = 0

term_size = shutil.get_terminal_size((80,20))

# This is needed for testing from the root of the git repo - must come before
# funtoo imports
if os.path.isdir(".git") and os.path.basename(os.getcwd()) == "boot-update":
	sys.path = [ "python/modules" ] + sys.path

# Import Funtoo extensions that we use:

import funtoo.boot.config
import funtoo.boot.helper
import funtoo.boot.extensions

from funtoo.boot.extension import ExtensionError
from funtoo.core.config import ConfigFileError

fstabinfo = funtoo.boot.helper.fstabInfo()

BLUE = "\x1b[34;01m"
CYAN = "\x1b[36;01m"
CYANN = "\x1b[36m"
GREEN = "\x1b[32;01m"
RED = "\x1b[31;01m"
PURP = "\x1b[35;01m"
OFF = "\x1b[0m"
version = "1.8.2"
verbose = False

def banner(extra=True):
	""" prints the banner message """
	print("")
	print("{P}boot-update {O}{C}{ver}{O} /".format(P = PURP, O = OFF, C = CYANN, ver = version))
	print("Copyright 2009-2018 Funtoo Solutions, Inc.")
	if extra:
		print("")
		print(" [use option \"-l\" for license info, \"-h\" for help]")
	print("")

def versinfo():
	""" prints version information """
	banner(extra=False)
	print("")
	print(""" This program is free software; you can redistribute and/or modify
 it under the terms of the GNU General Public License version 3 as published by
 the Free Software Foundation. Alternatively you may (at your option) use any
 other license that has been publicly approved for use with this program by
 Funtoo Technologies, LLC. (or its successors, if any.)
 """	)

def printhelp():
	""" prints the help message """
	banner(extra=False)
	print("")
	print(""" Usage: boot-update [options]
 Uses settings in /etc/boot.conf to generate new grub, grub-legacy or
 lilo  config file.

 Options:
   --showdefaults	Show hard-coded (user-overrideable) settings
   --show <sect/var>	Display variable "var" defined in section "sect"
   -C, --check		Validate configuration file, but do nothing else
   -V, --verbose	Verbose mode
   -h, --help		Display this information
   -l, --license	Display license information
"""	)


def mesg(msgtype, msg):
	global debug
	global term_size
	""" prints different types of messages to the console """
	outstr = None
	if msgtype == "debug":
		if debug:
			outstr = msg
		else:
			outstr = None
	elif verbose and msgtype == "info":
		outstr = "{G} *{O} {m}".format(G = GREEN, O = OFF, m = msg)
	elif msgtype in [ "norm", "info" ]:
		outstr = "{G} *{O} {m}".format(G = GREEN, O = OFF, m = msg)
	elif msgtype == "boot":
		outstr = "           {m}".format(m = msg)
	elif msgtype == "defboot":
		outstr = "{C} DEFAULT > {G}{m}{O}".format(C = CYAN, G = GREEN, m = msg, O = OFF)
	elif msgtype == "note":
		outstr = "{R} * NOTE:{O} {m}".format(R = CYAN, O = OFF, m = msg)
	elif msgtype == "warn":
		outstr ="{R} * WARN:{O} {m}".format(R = RED, O = OFF, m = msg)
	elif msgtype == "fatal" or True:
		outstr = "{R} * ERR :{O} {m}".format(R = RED, O = OFF, m = msg)
	if outstr:
		print(textwrap.fill(outstr, term_size[0], initial_indent=" ", subsequent_indent="          "))


def cleanup(success, msgs=None, ext=None):
	""" prints accumulated errors and warnings and exits appropriately """
	if msgs is None:
		msgs = []
	if ext is not None:
		# unmounts any non-/boot filesystems we may have mounted for scanning.
		# /boot unmounting is handled via another process.
		ext.r.UnmountIfNecessary()
		msgs += ext.msgs

	warnings = False
	for msgtype, msg in msgs:
		if msgtype == "warn":
			warnings = True
		mesg(msgtype, msg)
	print()
	if not success:
		mesg("fatal", "Did not complete successfully.")
		print()
		sys.exit(1)
	else:
		outstr = "Completed successfully"
		if warnings:
			outstr += " with warnings."
		else:
			outstr += "."
		mesg("norm", outstr)
		print()
		sys.exit(0)


def update(config, success):
	global allmsgs
	""" update configuration """
	# Generate warnings for any invalid config file entries...
	for invalid in config.validate():
		allmsgs.append(["warn", "invalid config setting \"{iv}\"; ignored.".format(iv = invalid)])

	# Figure out what extension we should be loading...

	generate = config["boot/generate"]

	if generate == "":
		success = False
		allmsgs.append(["fatal", "boot/generate does not specify a valid boot loader to generate a config for."])

	if generate not in funtoo.boot.extensions.__all__:
		success = False
		allmsgs.append(["fatal", "extension for boot loader \"%s\" (specified in boot/generate) not found." % generate])

	if ("-C" in sys.argv) or ("--check" in sys.argv):
		allmsgs.append(["norm", "Configuration file {cf} checked.".format(cf = cfile)])
		cleanup(success)

	mesg("norm", "Generating config for {gen}...".format(gen=generate))
	print()

	if not success:
		cleanup(success, msgs=allmsgs)

	# Before loading extension, we want to auto-mount boot if it isn't
	# already mounted:

	imountedit = False

	if fstabinfo.hasEntry("/boot"):
		if not os.path.ismount("/boot"):
			mesg("debug","Mounting filesystem /boot...")
			os.system("mount /boot")
			imountedit = True
	else:
		mesg("info", "No /etc/fstab entry for /boot; not mounting.")

	# Dynamically import the proper extension module (ie. grub.py,
	# grub-legacy.py, lilo.py):
	extname = "funtoo.boot.extensions.{gen}".format(gen = generate)
	__import__(extname)
	extmodule = sys.modules[extname]
	# Create Boot Loader Extension object: and regenerate config file
	ext = None
	try:
		ext = extmodule.getExtension(config)
		ext.mesg = mesg
		success = ext.regenerate()[1:]
	except ExtensionError as e:
		success = False
		allmsgs.append(["fatal", e])

	if success:
		pos = 0
		while pos < len(ext.bootitems):
			if pos == ext.defpos:
				mesg("defboot", ext.bootitems[pos])
			else:
				mesg("boot", ext.bootitems[pos])
			pos += 1
	print()
	# If we mounted /boot, we should unmount it:
	if imountedit:
		mesg("debug","Unmounting /boot")
		os.system("umount /boot")

	cleanup(success, msgs=allmsgs, ext=ext)


if os.geteuid() != 0:
	print("")
	mesg("fatal", "boot-update requires root privileges")
	print("")
else:
	if len(sys.argv) >= 2 and (("-l" in sys.argv) or ("--license" in sys.argv)):
		versinfo()
		sys.exit(0)

	if "-V" in sys.argv or ("--verbose" in sys.argv):
		verbose = True

	ok = True
	allmsgs = []
	cfile = "/etc/boot.conf"
	# Load /etc/boot.conf master configuration file:
	try:
		c = funtoo.boot.config.BootConfigFile(cfile)
		if not c.fileExists():
			ok = False
			allmsgs.append(["fatal", "Master configuration file \"{cf}\" does not exist.".format(cf=cfile)])
	except ConfigFileError as e:
		ok = False
		banner()
		allmsgs.append(["fatal", "Parse Error: {err}".format(err=e)])
	if not ok:
		cleanup(ok, msgs=allmsgs)

	if len(sys.argv) >= 3 and sys.argv[1] == "--show":
		print(c[sys.argv[2]])
	elif len(sys.argv) >= 2 and sys.argv[1] == "--showdefaults":
		print("# These are the default settings that can be overridden by")
		print("# the /etc/boot.conf file.")
		print("")
		for line in c.parent.dump():
			if not line.startswith("#"):
				sys.stdout.write(line)
	elif len(sys.argv) >=2 and (sys.argv[1] in ["-h", "--help"]):
		printhelp()
	elif len(sys.argv) >=2 and (sys.argv[1]) in ["--success"]:
		pass
		# TODO:
	else:
		# default behavior -- regenerate boot config:
		banner()
		update(c, ok)

# vim: ts=4 sw=4 noet
